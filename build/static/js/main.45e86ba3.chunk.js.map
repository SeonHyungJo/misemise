{"version":3,"sources":["store/modules/index.js","store/index.js","component/Map/index.jsx","component/App/index.jsx","index.js"],"names":["getDataAsync","createAction","otp","dispatch","naver","_lat","_lng","Promise","resolve","maps","Service","reverseGeocode","location","LatLng","status","response","Status","OK","addr","result","items","converLatLngToAddr","then","rtn","console","log","serverUrl","process","REACT_APP_SERVER_URL","sig","concat","zoomLevel","parentCd","emd","country","url","axios","request","headers","Content-Type","method","getMiseDate","Object","objectSpread","type","payload","catch","error","handleActions","defineProperty","state","action","_action$payload","data","map","gridData","geoData","i","id","properties","LOC_KOR_NM","name","AIR_LV","etc","KOR_LV","mapObj","lat","lng","store","createStore","modules","applyMiddleware","ReduxThunk","styleOptions","fillOpacity","fillColor","strokeColor","strokeWeight","strokeOpacity","Map","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","React","createRef","_ncpClientId","requestUrl","loadJs","window","onJSContentLoaded","_this2","_this$props","props","ncpClientId","loadScriptPromise","zoomRange","maxZoom","length","minZoom","mapOptions","logoControl","mapDataControl","scaleControl","center","draggable","scrollWheel","keyboardShortcuts","disableDoubleTapZoom","disableDoubleClickZoom","disableTwoFingerTapZoom","zoom","setState","prevState","newMap","setStyle","feature","property_KOR_LV","addListener","e","overrideStyle","revertStyle","_e$feature$bounds$get","bounds","getCenter","x","y","currentZoom","getZoom","property_LOC_CD","indexOf","tempArr","slice","push","setZoom","setCenter","_e$feature$bounds$get2","nextIdx","shift","ex","allFeature","getAllFeature","item","removeFeature","forEach","element","addGeoJson","react_default","a","createElement","Fragment","style","width","height","ref","Component","connect","bindActionCreators","columns","title","_ref","component_Map","REACT_APP_SERVICEKEY","toastui_react_grid_default","rowHeight","bodyHeight","virtualScrolling","heightResizable","rowHeaders","ReactDOM","render","es","component_App","document","getElementById"],"mappings":"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","file":"static/js/main.45e86ba3.chunk.js","sourcesContent":["import { handleActions, createAction } from 'redux-actions'\r\nimport axios from 'axios'\r\n\r\nconst getMiseDate = (otp) => {\r\n  console.log('getMiose', otp)\r\n\r\n  // parentCd : 사용자가 클릭한 geoJSON의 코드값.\r\n  // zoomLevel : 요청 레벨.\r\n  let serverUrl = process.env.REACT_APP_SERVER_URL\r\n  let sig = `/sig?zoomLevel=${otp.zoomLevel}&parentCd=${otp.parentCd}`\r\n  let emd = `/emd?zoomLevel=${otp.zoomLevel}&parentCd=${otp.parentCd}`\r\n  let country = `/country?zoomLevel=${otp.zoomLevel}&parentCd=${otp.parentCd}`\r\n\r\n  let url = serverUrl +\r\n  (otp.zoomLevel === 2 ? country\r\n  : otp.zoomLevel === 4 ? sig\r\n  : otp.zoomLevel === 6 ? emd : \"\")\r\n  \r\n  return axios.request({\r\n    headers: {\r\n      'Content-Type': 'application/json;charset=UTF-8'\r\n    },\r\n    method: 'GET',\r\n    url: url\r\n  })\r\n}\r\n\r\n// 한글 주소로 변환한다.\r\nconst converLatLngToAddr = (otp) => {\r\n  const { naver, _lat, _lng } = otp\r\n\r\n  return new Promise((resolve) => {\r\n    naver.maps.Service.reverseGeocode({ location: new naver.maps.LatLng(_lat, _lng) }, (status, response) => {\r\n      if (status === naver.maps.Service.Status.OK) {\r\n        let addr = response.result.items[0]\r\n        resolve(addr)\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\n// Action\r\nconst GET_MISE_DATA = 'GET_MISE_DATA'\r\n\r\n// React에서 호출하는 부분\r\nexport const getData = createAction(GET_MISE_DATA)\r\n\r\nexport const getDataAsync = (otp) => dispatch => {\r\n  // 주소변환.\r\n  converLatLngToAddr(otp).then(rtn => \r\n     getMiseDate({ ...otp, addr: rtn })\r\n  ).then(rtn => {\r\n    // 요청이 성공했을경우, 서버 응답내용을 payload 로 설정하여 GET_POST_SUCCESS 액션을 디스패치합니다.\r\n\r\n    dispatch({\r\n      type: GET_MISE_DATA,\r\n      payload: { ...rtn, ...otp }\r\n    })\r\n  }).catch(error => {\r\n    // 에러가 발생했을 경우, 에로 내용을 payload 로 설정하여 GET_POST_FAILURE 액션을 디스패치합니다.\r\n    dispatch({\r\n      type: GET_MISE_DATA,\r\n      payload: { ...error, ...otp }\r\n    })\r\n  })\r\n}\r\n\r\n// 행정구역의 레벨. (줌 레벨)\r\n// 중앙 : 충주.\r\nconst counterInitialState = {\r\n  data: {},\r\n  mapObj: {},\r\n  zoomLevel: 2,\r\n  lat: 36.9257913,\r\n  lng: 127.87798\r\n}\r\n\r\n// 리듀서.\r\nexport default handleActions({\r\n  [GET_MISE_DATA]: (state, action) => {\r\n    const { data, _lat, _lng, map, zoomLevel } = action.payload\r\n\r\n    let gridData = []\r\n    if (data&& data.geoData) {\r\n      gridData = data.geoData.map(i => {\r\n        return { 'id': i.properties.LOC_KOR_NM, 'name': i.properties.AIR_LV, 'etc': i.properties.KOR_LV }\r\n      })\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      'zoomLevel': zoomLevel,\r\n      'mapObj': map,\r\n      'lat': _lat,\r\n      'lng': _lng,\r\n      'data': data,\r\n      'gridData': gridData\r\n    }\r\n  }\r\n}, counterInitialState)\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport modules from './modules'\r\nimport ReduxThunk from 'redux-thunk'\r\n\r\nconst store = createStore(modules, applyMiddleware(ReduxThunk))\r\n\r\nexport default store\r\n","import React, { Component } from 'react'\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { getDataAsync } from '../../store/modules'\r\nimport loadJs from 'load-js'\r\n\r\nconst styleOptions = {\r\n  fillOpacity: 0.6,\r\n  fillColor: '#ff0000',\r\n  strokeColor: '#ff0000',\r\n  strokeWeight: 2,\r\n  strokeOpacity: 0.5\r\n}\r\n\r\nclass Map extends Component {\r\n  constructor () {\r\n    super()\r\n    this.map = React.createRef()\r\n  }\r\n\r\n  loadScriptPromise (_ncpClientId) {\r\n    const requestUrl = `https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=${_ncpClientId}&submodules=geocoder`\r\n    return loadJs(requestUrl).then(() =>\r\n      new Promise(resolve => {\r\n        window.naver.maps.onJSContentLoaded = () => {\r\n          resolve(window.naver)\r\n        }\r\n      })\r\n    )\r\n  }\r\n\r\n  componentDidMount () {\r\n    const { ncpClientId, getDataAsync, _lat, _lng, zoomLevel } = this.props\r\n\r\n    this.loadScriptPromise(ncpClientId).then((naver) => {\r\n      let zoomRange = [2, 4, 6]\r\n      let maxZoom = zoomRange[zoomRange.length - 1]\r\n      let minZoom = zoomRange[0]\r\n\r\n      // 전국 : 2, 시군구 :4  읍면동 : 7\r\n      // naver.maps. PointBounds 경계 생성.\r\n      // 인터렉션 옵션.\r\n      const mapOptions = {\r\n        logoControl: false,\r\n        mapDataControl: false,\r\n        scaleControl: false,\r\n        center: new naver.maps.LatLng(_lat, _lng), // 충주\r\n        draggable: false,\r\n        scrollWheel: false,\r\n        keyboardShortcuts: false,\r\n        disableDoubleTapZoom: true,\r\n        disableDoubleClickZoom: true,\r\n        disableTwoFingerTapZoom: true,\r\n        zoom: zoomLevel,\r\n        // baseTileOpacity: 0.5,\r\n        maxZoom: maxZoom,\r\n        minZoom: minZoom\r\n      }\r\n      const map = new naver.maps.Map('map', mapOptions)\r\n\r\n      this.setState((prevState) => {\r\n        return ({\r\n          ...prevState,\r\n          newMap: map,\r\n          parentCd: []\r\n        })\r\n      })\r\n\r\n      map.data.setStyle(function (feature) {\r\n        const korLv = feature.property_KOR_LV\r\n\r\n        switch (korLv) {\r\n          case '좋음':\r\n            styleOptions.fillColor = '#117cf6'\r\n            break\r\n          case '보통':\r\n            styleOptions.fillColor = '#50af32'\r\n            break\r\n          case '나쁨':\r\n            styleOptions.fillColor = '#c4b341'\r\n            break\r\n          case '매우나쁨':\r\n            styleOptions.fillColor = '#d36f36'\r\n            break\r\n        }\r\n\r\n        return styleOptions\r\n      })\r\n\r\n      map.data.addListener('mouseover', function (e) {\r\n        map.data.overrideStyle(e.feature, {\r\n          strokeWeight: 8\r\n        })\r\n\r\n        map.data.addListener('mouseout', function (e) {\r\n          map.data.revertStyle()\r\n        })\r\n      })\r\n\r\n      // zoom UP\r\n      map.data.addListener('click', (e) => {\r\n        const feature = e.feature\r\n        const { x: _lng, y: _lat } = e.feature.bounds.getCenter()\r\n        const currentZoom = map.getZoom()\r\n\r\n        if (maxZoom > currentZoom) {\r\n          const parentCd = feature.property_LOC_CD\r\n          const zoomLevel = zoomRange[zoomRange.indexOf(currentZoom) + 1] || currentZoom\r\n          const tempArr = this.state.parentCd.slice()\r\n\r\n          this.setState({ 'parentCd': tempArr })\r\n          tempArr.push(parentCd)\r\n          map.setZoom(zoomLevel)\r\n          map.setCenter(new naver.maps.LatLng(_lat, _lng))\r\n          getDataAsync({ _lat, _lng, zoomLevel, naver, map, parentCd, feature })\r\n        }\r\n      })\r\n\r\n      // zoom Down\r\n      map.data.addListener('rightclick', (e) => {\r\n        const { x: _lng, y: _lat } = e.feature.bounds.getCenter()\r\n        const currentZoom = map.getZoom()\r\n\r\n        if (minZoom < currentZoom) {\r\n          const nextIdx = zoomRange.indexOf(currentZoom) - 1\r\n          const zoomLevel = zoomRange[nextIdx] || currentZoom\r\n          map.setZoom(zoomLevel)\r\n          map.setCenter(new naver.maps.LatLng(_lat, _lng))\r\n\r\n          const parentCd = this.state.parentCd.shift()\r\n          getDataAsync({ _lat, _lng, zoomLevel, naver, map, parentCd })\r\n        }\r\n      })\r\n\r\n      return getDataAsync({ _lat, _lng, zoomLevel, naver, map })\r\n    }).catch((ex) => {\r\n      console.error(ex)\r\n    })// END _promise\r\n  }\r\n\r\n  shouldComponentUpdate (props, state) {\r\n    const { data } = props\r\n\r\n    if (data && data.geoData) {\r\n      let allFeature = state.newMap.data.getAllFeature()\r\n\r\n      if (allFeature.length > 0) {\r\n        while (allFeature.length > 0) {\r\n          let item = allFeature[0]\r\n          state.newMap.data.removeFeature(item)\r\n        }\r\n      }\r\n\r\n      data.geoData.forEach(element => {\r\n        state.newMap.data.addGeoJson(element)\r\n      })\r\n    }\r\n    return true\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <>\r\n        <div id=\"map\" style={{ width: '100%', height: 600 + 'px' }} ref={this.map}></div>\r\n        {/* {JSON.stringify(data)} */}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  mapObj: state.mapObj,\r\n  _lat: state.lat,\r\n  _lng: state.lng,\r\n  zoomLevel: state.zoomLevel,\r\n  data: state.data\r\n})\r\n\r\nconst maDispatchToPrope = (dispatch) => ({\r\n  getDataAsync: bindActionCreators(getDataAsync, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, maDispatchToPrope)(Map)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Map from '../Map'\r\nimport './tui-grid.css'\r\nimport Grid from '@toast-ui/react-grid'\r\nimport { bindActionCreators } from 'redux'\r\nimport { getDataAsync } from '../../store/modules'\r\n\r\nconst columns = [\r\n  { name: 'id', title: '지역' },\r\n  { name: 'name', title: '수치' },\r\n  { name: 'etc', title: '단계' }\r\n]\r\n\r\n// 함수형 컴포넌트\r\nconst App = ({ gridData }) => {\r\n  return (\r\n    <>\r\n      <Map ncpClientId={process.env.REACT_APP_SERVICEKEY}/>\r\n      <Grid\r\n        data={gridData}\r\n        columns={columns}\r\n        rowHeight={25}\r\n        bodyHeight={100}\r\n        virtualScrolling={true}\r\n        heightResizable={false}\r\n        rowHeaders={['rowNum']}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  gridData: state.gridData\r\n})\r\n\r\nconst maDispatchToPrope = (dispatch) => ({\r\n  getDataAsync: bindActionCreators(getDataAsync, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, maDispatchToPrope)(App)\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport store from './store'\r\n\r\nimport App from './component/App'\r\n\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}